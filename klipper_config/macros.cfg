# Conditional G28
[gcode_macro CG28]
gcode:
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28 Z

# Conditional G28
[gcode_macro CG32]
gcode:
  {% if printer.quad_gantry_level.applied is not true %}
    G32
  {% endif %}

[gcode_macro Lights_On]
gcode:
    SET_PIN PIN=chamber_lights VALUE=0.1
    SET_PIN PIN=afterburner_lights VALUE=1

[gcode_macro Lights_Off]
gcode:
    SET_PIN PIN=chamber_lights VALUE=0
    SET_PIN PIN=afterburner_lights VALUE=0
    SET_LED LED=_fysetc_mini12864 RED=0 GREEN=0 BLUE=0

# Park Toolhead Routine
[gcode_macro Park_Toolhead]
gcode:
    {% if ('xyz' in printer.toolhead.homed_axes) %}
       G90
       G1 X175 Y20 Z20 F48000
    {% endif %}

# Park Toolhead Routine
[gcode_macro Park_Center]
gcode:
    {% if ('xyz' in printer.toolhead.homed_axes) %}
       G90
       G1 X175 Y175 Z50 F48000
    {% endif %}

[gcode_macro Park_Bucket]
gcode:
    {% if ('xyz' in printer.toolhead.homed_axes) %}
       G90
       G1 X122.00 Y356.00 Z10 F48000
    {% endif %}

# Actually do some planning around how long to wait for chamber temp..
[gcode_macro PREPARE_CHAMBER]
description: Heat bed, QGL, 
gcode:
    {% set BED = params.BED_TEMP|int %}
    {% set CHAMBER = params.CHAMBER_TEMP|int %}

    CG28
    CG32
    Park_Center
    nevermore_on
    M117 Heating Bed
    M190 S{BED}
    M191 S{CHAMBER}

    G32
    BED_MESH_CALIBRATE

[gcode_macro PREPARE_TOOLHEAD]
description: Heat up toolhead, purge and wipe before z_calibration is run.
gcode:
    {% set HE = params.HOTEND_TEMP|int %}
    {% set PCFAN = params.NO_OOZE_FAN|default(128)|int %}

    Park_Bucket
    M117 Heating Nozzle..
    SET_PIN PIN=afterburner_lights VALUE=0.1
    M109 S{HE}
    M106 S{PCFAN}
    # Temporary disable to check nozzle modded sexbolt.
    clean_nozzle
    M117 Z Calibration

    SAVE_GCODE_STATE NAME=PREP_TOOLHEAD
    M83
    G1 E-2 F2700
	  RESTORE_GCODE_STATE NAME=PREP_TOOLHEAD

    CALIBRATE_Z
    clean_nozzle
    M106 S0

[gcode_macro PRINT_START]
variable_bedtemp: 0
variable_hotendtemp: 0
variable_chambertemp: 0
gcode:
    {% set bed = params.BED|int %}
    {% set hotend = params.EXTRUDER|int %}
    {% set chamber = params.CHAMBER|int %}

    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=bedtemp VALUE={bed}	
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=hotendtemp VALUE={hotend}	
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=chambertemp VALUE={chamber}


    PREPARE_CHAMBER BED_TEMP={bed} CHAMBER_TEMP={chamber}
    PREPARE_TOOLHEAD HOTEND_TEMP={hotend}
    SET_FILAMENT_SENSOR SENSOR=filament_detection ENABLE=1
    M117 Printing...

[gcode_macro UNLOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=UNLOADFILAMENT
	M83                                   ; set extruder to relative
	G1 E10 F600                           ; extrude a little to soften tip
	G1 E-70 F1800                        ; retract filament completely
	RESTORE_GCODE_STATE NAME=UNLOADFILAMENT

[gcode_macro LOAD_FILAMENT]
gcode:
	SAVE_GCODE_STATE NAME=LOADFILAMENT
	M83 ; set extruder to relative
	G1 E85 F600
	#RESET_FILAMENT_WIDTH_SENSOR
	RESTORE_GCODE_STATE NAME=LOADFILAMENT

[gcode_macro OFF]
gcode:
	M84												 ; turn steppers off
  TURN_OFF_HEATERS								 ; turn bed / hotend off
  M107                         	   			 	 ; turn print cooling fan off
	SET_PIN PIN=caselight VALUE=0						; turn light off
  nevermore_off


# Fluidd SD printing
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
	SDCARD_RESET_FILE
	PRINT_END
	BASE_CANCEL_PRINT

[gcode_macro PRINT_END]
gcode:
  {% set HOTEND = params.EXTRUDER_TEMP|default(220)|int %}

  M400
  M104 S0

  TURN_OFF_HEATERS
  RELATIVE
  G1 Z10 F3000
  ABSOLUTE
  G1 X30 Y354 F48000
  
  M106 S255
  #TEMPERATURE_WAIT SENSOR=extruder MINIMUM={HOTEND|int - 25} MAXIMUM={HOTEND|int - 20}
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM=205 MAXIMUM=210
  #clean_nozzle
  M106 S0
  BED_MESH_CLEAR
  SET_FILAMENT_SENSOR SENSOR=filament_detection ENABLE=0
  RUN_SHELL_COMMAND CMD=print_finished_pushbullet
  M117 Print Finished

[gcode_macro PA_Calibrate] 
gcode:
    {% set bed = params.BED|int %}
    {% set hotend = params.EXTRUDER|int %}
    {% set chamber = params.CHAMBER|int %}

    PRINT_START EXTRUDER={hotend} BED={bed} CHAMBER={chamber}
    PRESSURE_ADVANCE_CALIBRATION SIZE=250 PURGE_MM=0
    PRINT_END 

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
	{% set z = params.Z|default(20)|int %}																					; z hop amount
	{% if printer['pause_resume'].is_paused|int == 0 %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}									    						; set z hop variable for reference in resume macro
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}									; set hotend temp variable for reference in resume macro
    SET_FILAMENT_SENSOR SENSOR=filament_detection ENABLE=0															; disable filament sensor
    SAVE_GCODE_STATE NAME=PAUSE																							; save current print position for resume
    BASE_PAUSE																											; pause print
    {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}										; check that zhop doesn't exceed z max
      G91																												; relative positioning
      G1 Z{z} F900																									; raise Z up by z hop amount
    {% else %}
      { action_respond_info("Pause zhop exceeds maximum Z height.") }													; if z max is exceeded, show message and set zhop value for resume to 0
      SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
    {% endif %}
    G90																													; absolute positioning
    G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F19500									; park toolhead at front center
    SAVE_GCODE_STATE NAME=PAUSEPARK																						; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
    M104 S0																												; turn off hotend
    SET_IDLE_TIMEOUT TIMEOUT=43200															    						; set timeout to 12 hours
	{% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
	{% set e = params.E|default(2.5)|int %}
	{% if printer['pause_resume'].is_paused|int == 1 %}
    SET_FILAMENT_SENSOR SENSOR=filament_detection ENABLE=1																; enable filament sensor
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}											; set timeout back to configured value
    {% if etemp > 0 %}
      M109 S{etemp|int}																								; wait for hotend to heat back up
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=600															; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
    G91																													; relative positioning
    M83																													; relative extruder positioning
    {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
      G1 Z{zhop * -1} E{e} F900																						; prime nozzle by E, lower Z back down
    {% else %}
      G1 Z{zhop * -1} F900																							; lower Z back down	without priming (just in case we are testing the macro with cold hotend)
    {% endif %}
    RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=600																; restore position
    BASE_RESUME																											; resume print
	{% endif %}